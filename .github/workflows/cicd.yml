# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Mgbell CI/CD using github actions & docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    types: [ closed ]

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Gradle Caching
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.10.1'
    #
    # - name: Build with Gradle 8.10.1
    #   run: gradle build

    - name: make application-prod.properties
      if: |
        contains(github.ref, 'main')
      run: |
        mkdir -p ./src/main/resources # resources 폴더 생성
        cd ./src/main/resources # resources 폴더로 이동
        touch ./application-prod.properties # application-prod.properties 생성
        echo "${{ secrets.PROPERTIES }}" > ./application-prod.properties # github actions에서 설정한 값을 application-prod.properties 파일에 쓰기
      shell: bash

    - name: make application-oauthProd.properties
      if: |
        contains(github.ref, 'main')
      run: |
        cd ./src/main/resources # resources 폴더로 이동
        touch ./application-oauthProd.properties # application-oauthProd.properties 생성
        echo "${{ secrets.OAUTH_PROPERTIES }}" > ./application-oauthProd.properties # github actions에서 설정한 값을 application-oauthProd.properties 파일에 쓰기
      shell: bash

    # gradle build
    - name: Build with Gradle
      run: |
        cd mgbell
        ./gradlew clean build -x test # 빌드에서 테스트 코드 제외

    # docker build & push to production
    - name: Docker Login
      run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      
    - name: Docker build & push
      if: contains(github.ref, 'main')
      run: |
        docker build -f .github/workflows/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/docker-prod .
        docker push ${{ secrets.DOCKER_USERNAME }}/docker-prod

  ## deploy to production
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      if: contains(github.ref, 'main')
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.PRIVATE_KEY }}
        envs: GITHUB_SHA
        script: |
          sudo docker ps
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-prod
          sudo docker run -d -p ${{ secrets.DOCKER_USERNAME }}/docker-prod
          sudo docker image prune -f

      
